{"remainingRequest":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/src/components/Contact.vue?vue&type=template&id=cf6573c0&scoped=true&","dependencies":[{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/src/components/Contact.vue","mtime":1653389777094},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}