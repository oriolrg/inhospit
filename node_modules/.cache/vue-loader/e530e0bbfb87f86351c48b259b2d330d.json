{"remainingRequest":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/oriol/Documents/tecnolord/inhospit/inhospit-web/src/components/Sopar.vue?vue&type=template&id=64d4b645&scoped=true&","dependencies":[{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/src/components/Sopar.vue","mtime":1657010887403},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/oriol/Documents/tecnolord/inhospit/inhospit-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}